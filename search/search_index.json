{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"USM Lap","text":"<p>Laptime simulator built by the University of Strathclyde Motorsport team.</p>"},{"location":"autoapi/summary/","title":"Summary","text":"<ul> <li>usmlap<ul> <li>__main__</li> <li>datatypes</li> <li>utils<ul> <li>geometry</li> <li>proportion</li> </ul> </li> <li>vehicle<ul> <li>brakes</li> <li>common</li> </ul> </li> </ul> </li> </ul>"},{"location":"autoapi/usmlap/","title":"usmlap","text":""},{"location":"autoapi/usmlap/__main__/","title":"__main__","text":""},{"location":"autoapi/usmlap/datatypes/","title":"datatypes","text":""},{"location":"autoapi/usmlap/utils/","title":"utils","text":""},{"location":"autoapi/usmlap/utils/geometry/","title":"geometry","text":""},{"location":"autoapi/usmlap/utils/proportion/","title":"proportion","text":"<p>This module contains utility functions for working with proportions.</p>"},{"location":"autoapi/usmlap/utils/proportion/#usmlap.utils.proportion.normalise","title":"<code>normalise(values)</code>","text":"<p>Normalise a tuple of values.</p> <p>Values retain their relative proportions, but sum to 1.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>tuple[float, float]</code> <p>Tuple of values</p> required <p>Returns:</p> Name Type Description <code>normalised_values</code> <code>tuple[float, float]</code> <p>Tuple of normalised values</p> Source code in <code>src\\usmlap\\utils\\proportion.py</code> <pre><code>def normalise(values: tuple[float, ...]):\n    \"\"\"\n    Normalise a tuple of values.\n\n    Values retain their relative proportions, but sum to 1.\n\n    Args:\n        values (tuple[float, float]): Tuple of values\n\n    Returns:\n        normalised_values (tuple[float, float]): Tuple of normalised values\n    \"\"\"\n    total = sum(values)\n    return tuple(v / total for v in values)\n</code></pre>"},{"location":"autoapi/usmlap/utils/proportion/#usmlap.utils.proportion.split","title":"<code>split(total, proportions)</code>","text":"<p>Split a value proportionally</p> <p>Parameters:</p> Name Type Description Default <code>total</code> <code>float</code> <p>Total value</p> required <code>proportions</code> <code>tuple[float, ...]</code> <p>List of proportions</p> required <p>Returns:</p> Name Type Description <code>split_value</code> <code>tuple[float, ...]</code> <p>Total split proportionally according to proportions</p> Source code in <code>src\\usmlap\\utils\\proportion.py</code> <pre><code>def split(total: float, proportions: tuple[float, ...]):\n    \"\"\"\n    Split a value proportionally\n\n    Args:\n        total (float): Total value\n        proportions (tuple[float, ...]): List of proportions\n\n    Returns:\n        split_value (tuple[float, ...]):\n            Total split proportionally according to proportions\n    \"\"\"\n    return tuple(p * total / sum(proportions) for p in proportions)\n</code></pre>"},{"location":"autoapi/usmlap/utils/proportion/#usmlap.utils.proportion.with_complement","title":"<code>with_complement(proportion)</code>","text":"<p>Get a tuple containing a proportion and its complement</p> <p>Parameters:</p> Name Type Description Default <code>proportion</code> <code>float</code> <p>Value between 0 and 1</p> required <p>Returns:</p> Name Type Description <code>proportion_with_complement</code> <code>tuple[float, float]</code> <p>Tuple of proportion and (1 - proportion)</p> Source code in <code>src\\usmlap\\utils\\proportion.py</code> <pre><code>def with_complement(proportion: float) -&gt; tuple[float, float]:\n    \"\"\"\n    Get a tuple containing a proportion and its complement\n\n    Args:\n        proportion (float): Value between 0 and 1\n\n    Returns:\n        proportion_with_complement (tuple[float, float]):\n            Tuple of proportion and (1 - proportion)\n    \"\"\"\n    complement = 1 - proportion\n    return proportion, complement\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/","title":"vehicle","text":""},{"location":"autoapi/usmlap/vehicle/brakes/","title":"brakes","text":"<p>This module models the brake system of a vehicle.</p>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakeCaliper","title":"<code>BrakeCaliper</code>","text":"<p>               Bases: <code>Subsystem</code></p> <p>The brake caliper, transmitting force from the brake line to the wheel.</p> <p>Attributes:</p> Name Type Description <code>piston_count</code> <code>int</code> <p>The number of pistons in the caliper</p> <code>piston_diameter</code> <code>float</code> <p>The diameter of each piston, in metres</p> <code>piston_area</code> <code>float</code> <p>The total area of the pistons, in square metres</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>class BrakeCaliper(Subsystem):\n    \"\"\"\n    The brake caliper, transmitting force from the brake line to the wheel.\n\n    Attributes:\n        piston_count (int): The number of pistons in the caliper\n        piston_diameter (float): The diameter of each piston, in metres\n        piston_area (float): The total area of the pistons, in square metres\n    \"\"\"\n\n    piston_count: PositiveInt\n    piston_diameter: PositiveFloat\n\n    @property\n    def piston_area(self) -&gt; float:\n        return self.piston_count * geometry.area_of_circle(self.piston_diameter)\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakeDisc","title":"<code>BrakeDisc</code>","text":"<p>               Bases: <code>Subsystem</code></p> <p>The brake disc attached to the wheel.</p> <p>Attributes:</p> Name Type Description <code>outer_diameter</code> <code>float</code> <p>The outer diameter of the brake disc, in metres</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>class BrakeDisc(Subsystem):\n    \"\"\"\n    The brake disc attached to the wheel.\n\n    Attributes:\n        outer_diameter (float): The outer diameter of the brake disc, in metres\n    \"\"\"\n\n    outer_diameter: PositiveFloat\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakeLine","title":"<code>BrakeLine</code>","text":"<p>               Bases: <code>Subsystem</code></p> <p>An individual brake line.</p> <p>Attributes:</p> Name Type Description <code>cylinder</code> <code>MasterCylinder</code> <p>The master cylinder attached to the pedal</p> <code>caliper</code> <code>BrakeCaliper</code> <p>The brake caliper attached to the wheel</p> <code>disc</code> <code>BrakeDisc</code> <p>The brake disc attached to the wheel</p> <code>pad</code> <code>BrakePad</code> <p>The brake pad attached to the caliper</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>class BrakeLine(Subsystem):\n    \"\"\"\n    An individual brake line.\n\n    Attributes:\n        cylinder (MasterCylinder): The master cylinder attached to the pedal\n        caliper (BrakeCaliper): The brake caliper attached to the wheel\n        disc (BrakeDisc): The brake disc attached to the wheel\n        pad (BrakePad): The brake pad attached to the caliper\n    \"\"\"\n\n    cylinder: MasterCylinder\n    caliper: BrakeCaliper\n    disc: BrakeDisc\n    pad: BrakePad\n\n    @property\n    def _area_scaling_factor(self) -&gt; float:\n        \"\"\"The force scaling factor between the cylinder and caliper.\"\"\"\n        return self.caliper.piston_area / self.cylinder.piston_area\n\n    @property\n    def _effective_radius(self) -&gt; float:\n        \"\"\"The radius at which the braking force is applied to the wheel.\"\"\"\n        return 0.5 * (self.disc.outer_diameter - self.pad.height)\n\n    @property\n    def _force_to_torque_scaling_factor(self) -&gt; float:\n        \"\"\"The ratio between braking torque and master cylinder force.\"\"\"\n        return (\n            self._area_scaling_factor\n            * self.pad.coefficient_of_friction\n            * self._effective_radius\n        )\n\n    def get_brake_pressure(self, cylinder_force: float) -&gt; float:\n        \"\"\"\n        Calculate the pressure of the brake fluid.\n\n        Args:\n            cylinder_force (float):\n                Force applied to the master cylinder, in Newtons\n\n        Returns:\n            brake_pressure (float):\n                Gauge pressure of the brake fluid, in Pascals\n        \"\"\"\n        return cylinder_force / self.cylinder.piston_area\n\n    def force_to_torque(self, cylinder_force: float) -&gt; float:\n        \"\"\"\n        Calculate the braking torque applied to the wheel.\n\n        Args:\n            cylinder_force (float):\n                Force applied to the master cylinder, in Newtons\n\n        Returns:\n            braking_torque (float):\n                Torque applied to the wheel, in Newton-metres\n        \"\"\"\n        return cylinder_force * self._force_to_torque_scaling_factor\n\n    def torque_to_force(self, braking_torque: float) -&gt; float:\n        \"\"\"\n        Calculate the force required to apply a torque to the wheel.\n\n        Args:\n            braking_torque (float):\n                Braking torque required on the wheel, in Newton-metres\n\n        Returns:\n            cylinder_force (float):\n                Force required on the master cylinder, in Newtons\n        \"\"\"\n        return braking_torque / self._force_to_torque_scaling_factor\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakeLine.force_to_torque","title":"<code>force_to_torque(cylinder_force)</code>","text":"<p>Calculate the braking torque applied to the wheel.</p> <p>Parameters:</p> Name Type Description Default <code>cylinder_force</code> <code>float</code> <p>Force applied to the master cylinder, in Newtons</p> required <p>Returns:</p> Name Type Description <code>braking_torque</code> <code>float</code> <p>Torque applied to the wheel, in Newton-metres</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>def force_to_torque(self, cylinder_force: float) -&gt; float:\n    \"\"\"\n    Calculate the braking torque applied to the wheel.\n\n    Args:\n        cylinder_force (float):\n            Force applied to the master cylinder, in Newtons\n\n    Returns:\n        braking_torque (float):\n            Torque applied to the wheel, in Newton-metres\n    \"\"\"\n    return cylinder_force * self._force_to_torque_scaling_factor\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakeLine.get_brake_pressure","title":"<code>get_brake_pressure(cylinder_force)</code>","text":"<p>Calculate the pressure of the brake fluid.</p> <p>Parameters:</p> Name Type Description Default <code>cylinder_force</code> <code>float</code> <p>Force applied to the master cylinder, in Newtons</p> required <p>Returns:</p> Name Type Description <code>brake_pressure</code> <code>float</code> <p>Gauge pressure of the brake fluid, in Pascals</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>def get_brake_pressure(self, cylinder_force: float) -&gt; float:\n    \"\"\"\n    Calculate the pressure of the brake fluid.\n\n    Args:\n        cylinder_force (float):\n            Force applied to the master cylinder, in Newtons\n\n    Returns:\n        brake_pressure (float):\n            Gauge pressure of the brake fluid, in Pascals\n    \"\"\"\n    return cylinder_force / self.cylinder.piston_area\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakeLine.torque_to_force","title":"<code>torque_to_force(braking_torque)</code>","text":"<p>Calculate the force required to apply a torque to the wheel.</p> <p>Parameters:</p> Name Type Description Default <code>braking_torque</code> <code>float</code> <p>Braking torque required on the wheel, in Newton-metres</p> required <p>Returns:</p> Name Type Description <code>cylinder_force</code> <code>float</code> <p>Force required on the master cylinder, in Newtons</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>def torque_to_force(self, braking_torque: float) -&gt; float:\n    \"\"\"\n    Calculate the force required to apply a torque to the wheel.\n\n    Args:\n        braking_torque (float):\n            Braking torque required on the wheel, in Newton-metres\n\n    Returns:\n        cylinder_force (float):\n            Force required on the master cylinder, in Newtons\n    \"\"\"\n    return braking_torque / self._force_to_torque_scaling_factor\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.BrakePad","title":"<code>BrakePad</code>","text":"<p>               Bases: <code>Subsystem</code></p> <p>The brake pad attached to the caliper.</p> <p>Attributes:</p> Name Type Description <code>height</code> <code>float</code> <p>The height of the brake pad, in metres</p> <code>coefficient_of_friction</code> <code>float</code> <p>The coefficient of friction between the brake pad and brake disc</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>class BrakePad(Subsystem):\n    \"\"\"\n    The brake pad attached to the caliper.\n\n    Attributes:\n        height (float): The height of the brake pad, in metres\n        coefficient_of_friction (float):\n            The coefficient of friction between the brake pad and brake disc\n    \"\"\"\n\n    height: PositiveFloat\n    coefficient_of_friction: PositiveFloat\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.Brakes","title":"<code>Brakes</code>","text":"<p>               Bases: <code>Subsystem</code></p> <p>The brake system of the vehicle.</p> <p>Attributes:</p> Name Type Description <code>front</code> <code>BrakeLine</code> <p>Brake line for the front wheels</p> <code>rear</code> <code>BrakeLine</code> <p>Brake line for the rear wheels</p> <code>pedal_ratio</code> <code>float</code> <p>Ratio of master cylinder force to pedal force</p> <code>front_brake_bias</code> <code>float</code> <p>Proportion of force applied to the front master cylinder (value between 0 and 1)</p> <code>regen_torque</code> <code>float</code> <p>Maximum regenerative braking torque [Nm]</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>class Brakes(Subsystem):\n    \"\"\"\n    The brake system of the vehicle.\n\n    Attributes:\n        front (BrakeLine): Brake line for the front wheels\n        rear (BrakeLine): Brake line for the rear wheels\n        pedal_ratio (float): Ratio of master cylinder force to pedal force\n        front_brake_bias (float): Proportion of force applied to the front master cylinder (value between 0 and 1)\n        regen_torque (float): Maximum regenerative braking torque [Nm]\n    \"\"\"\n\n    front: BrakeLine\n    rear: BrakeLine\n    pedal_ratio: PositiveFloat\n    front_brake_bias: Percentage\n    regen_torque: PositiveFloat\n\n    @property\n    def brake_bias(self) -&gt; FrontRear[float]:\n        \"\"\"Tuple of brake biases for the front and rear wheels.\"\"\"\n        return FrontRear(proportion.with_complement(self.front_brake_bias))\n\n    @property\n    def brake_lines(self) -&gt; FrontRear[BrakeLine]:\n        \"\"\"Tuple of front and rear brake lines.\"\"\"\n        return FrontRear((self.front, self.rear))\n\n    def _get_front_brake_balance(self) -&gt; float:\n        front_multiplier = self.front.force_to_torque(1)\n        rear_multiplier = self.rear.force_to_torque(1)\n        return front_multiplier / (front_multiplier + rear_multiplier)\n\n    def _get_cylinder_forces(self, pedal_force: float) -&gt; FrontRear[float]:\n        \"\"\"\n        Get the force applied to the front and rear master cylinders.\n\n        Args:\n            pedal_force (float): Force applied to the pedal, in Newtons.\n\n        Returns:\n            cylinder_forces (FrontRear[float]):\n                Force applied to the master cylinders, in Newtons.\n        \"\"\"\n        total_force = pedal_force * self.pedal_ratio\n        return FrontRear([total_force * bias for bias in self.brake_bias])\n\n    def pedal_force_to_wheel_torque(\n        self, pedal_force: float\n    ) -&gt; FrontRear[float]:\n        cylinder_forces = self._get_cylinder_forces(pedal_force)\n        return FrontRear(\n            brake_line.force_to_torque(force)\n            for brake_line, force in zip(self.brake_lines, cylinder_forces)\n        )\n\n    def get_overall_brake_balance(self) -&gt; FrontRear[float]:\n        torques = self.pedal_force_to_wheel_torque(1)\n        return FrontRear(proportion.normalise(torques))\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.Brakes.brake_bias","title":"<code>brake_bias</code>  <code>property</code>","text":"<p>Tuple of brake biases for the front and rear wheels.</p>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.Brakes.brake_lines","title":"<code>brake_lines</code>  <code>property</code>","text":"<p>Tuple of front and rear brake lines.</p>"},{"location":"autoapi/usmlap/vehicle/brakes/#usmlap.vehicle.brakes.MasterCylinder","title":"<code>MasterCylinder</code>","text":"<p>               Bases: <code>Component</code></p> <p>The master cylinder, transmitting force from the pedal to the brake line.</p> <p>Attributes:</p> Name Type Description <code>piston_diameter</code> <code>float</code> <p>The diameter of the piston, in metres</p> <code>colour</code> <code>str</code> <p>The colour of the master cylinder</p> <code>piston_area</code> <code>float</code> <p>The area of the piston, in square metres</p> Source code in <code>src\\usmlap\\vehicle\\brakes.py</code> <pre><code>class MasterCylinder(Component):\n    \"\"\"\n    The master cylinder, transmitting force from the pedal to the brake line.\n\n    Attributes:\n        piston_diameter (float): The diameter of the piston, in metres\n        colour (str): The colour of the master cylinder\n        piston_area (float): The area of the piston, in square metres\n    \"\"\"\n\n    piston_diameter: PositiveFloat\n    colour: str\n\n    @property\n    def piston_area(self) -&gt; float:\n        return geometry.area_of_circle(self.piston_diameter)\n\n    @classmethod\n    def library_name(cls) -&gt; str:\n        return \"master_cylinders.json\"\n</code></pre>"},{"location":"autoapi/usmlap/vehicle/common/","title":"common","text":""}]}